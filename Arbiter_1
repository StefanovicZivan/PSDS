-- Company: 
-- Engineer: 
-- 
-- Create Date: 11/10/2019 06:08:18 PM
-- Design Name: 
-- Module Name: Arbiter - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Arbiter is
    Port ( r1 : in STD_LOGIC;
           r0 : in STD_LOGIC;
           g1 : out STD_LOGIC;
           g0 : out STD_LOGIC;
           clk : in STD_LOGIC);
end Arbiter;

architecture Behavioral of Arbiter is

    type state is(waitr,grant1,grant0);
    signal state_reg,state_next : state;
    signal count_s : std_logic_vector(3 downto 0):= "0000";
    signal count_next : std_logic_vector(3 downto 0);
    signal flag :std_logic;

begin
    
    reg:process(clk,count_s) is
    begin
        if(clk'event and clk='1') then
            state_reg <= state_next;
            count_s <= count_next;
        end if;
    end process;

    kom:process(state_reg,r1,r0,count_s,flag,clk) is
    begin    
        
        if(count_s = "0101") then
            count_next <= "0000";
            flag <= '1';
        else
            count_next <= count_s + 1;
            flag <= '0';
        end if;
        
        case state_reg is
            when waitr =>
                g1 <= '0';
                g0 <= '0';
                if(r1='0' and r0='0') then
                    state_next <= waitr;
                elsif(r1='0' and r0='1') then
                    state_next <= grant0;
                else
                    state_next <= grant1;
                end if;
            
            when grant0 =>
                g1 <= '0';
                g0 <= '1';
                if( r0='0' or flag='1') then
                    state_next <= waitr;
                else
                    state_next <= grant0;
                end if;
                
            when grant1 =>
                g1 <= '1';
                g0 <= '0';
                if( r1='0' or flag='1') then
                    state_next <= waitr;
                else
                    state_next <= grant1;
                end if;
        end case;
    end process;
end Behavioral;